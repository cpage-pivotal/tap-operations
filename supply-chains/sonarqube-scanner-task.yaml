#
# ref: https://hub.tekton.dev/tekton/task/sonarqube-scanner
# This file has been modified to include the SONAR_LOGIN parameter.
#
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: sonarqube-scanner
  namespace: default
  labels:
    app.kubernetes.io/version: "0.2"

    # Silly label used for matching. The Runnable that's
    # defined in the clusterSourceTemplate uses this label
    # to select this task.
    apps.tanzu.vmware.com/sonarqube: "sonarqube"

  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/categories: Security
    tekton.dev/tags: security
    tekton.dev/displayName: "sonarqube scanner"
    tekton.dev/platforms: "linux/amd64"
spec:
  description: >-
    The following task can be used to perform static analysis on the source code
    provided the SonarQube server is hosted
    SonarQube is the leading tool for continuously inspecting the Code Quality and Security
    of your codebases, all while empowering development teams. Analyze over 25 popular
    programming languages including C#, VB.Net, JavaScript, TypeScript and C++. It detects
    bugs, vulnerabilities and code smells across project branches and pull requests.
  params:
    - name: SONAR_HOST_URL
      description: Host URL where the sonarqube server is running
      default: ""
    - name: SONAR_PROJECT_KEY
      description: Project's unique key
      default: ""
    - name: SONAR_LOGIN
      description: Auth for the project
      default: ""
    - name: source-url
      description: Location of the source code

    # This parameter is not used, but is passed in because 'source-revision'
    # is a required output from our Cartographer resource. If we don't pass
    # it down to the task, then Cartographer complains. This is because
    # Cartographer checks the status of these parameters upon task completion.
    # Cartographer considers a task as 'successful' if the variable is populated.
    - name: source-revision
      description: i.e. git hash
      default: ""

  workspaces:
    - name: tmp-workspace

  steps:
    - name: sonar-properties-create
      image: gradle
      workingDir: $(workspaces.tmp-workspace.path)
      script: |
        #!/usr/bin/env bash
        replaceValues() {
          filename=$1
          thekey=$2
          newvalue=$3
          if ! grep -R "^[#]*\s*${thekey}=.*" $filename >/dev/null; then
            echo "APPENDING because '${thekey}' not found"
            echo "" >>$filename
            echo "$thekey=$newvalue" >>$filename
          else
            echo "SETTING because '${thekey}' found already"
            sed -ir "s|^[#]*\s*${thekey}=.*|$thekey=$newvalue|" $filename
          fi
        }

        # If we were given a properties file, then use that.
        if [[ -f $(workspaces.tmp-workspace.path)/sonar-project.properties ]]; then
          echo "using user provided sonar-project.properties file"
          cp -RL $(workspaces.tmp-workspace.path)/sonar-project.properties $(workspaces.tmp-workspace.path)/sonar-project.properties
        fi
        if [[ -f $(workspaces.tmp-workspace.path)/sonar-project.properties ]]; then

          # Allow overrides from parameters passed in from the supply chain.
          if [[ -n "$(params.SONAR_HOST_URL)" ]]; then
            replaceValues $(workspaces.tmp-workspace.path)/sonar-project.properties sonar.host.url $(params.SONAR_HOST_URL)
          fi
          if [[ -n "$(params.SONAR_PROJECT_KEY)" ]]; then
            replaceValues $(workspaces.tmp-workspace.path)/sonar-project.properties sonar.projectKey $(params.SONAR_PROJECT_KEY)
          fi
        else
          touch sonar-project.properties
          echo "sonar.projectKey=$(params.SONAR_PROJECT_KEY)" >> sonar-project.properties
          echo "sonar.host.url=$(params.SONAR_HOST_URL)" >> sonar-project.properties
          echo "sonar.login=$(params.SONAR_LOGIN)" >> sonar-project.properties
          echo "sonar.sources=." >> sonar-project.properties
        fi
        echo "---------------------------"
        cat $(workspaces.tmp-workspace.path)/sonar-project.properties

        # Download the code from the location created by Cartographer
        # (Cartographer already fetched the code for us, so we don't 
        # need to fetch it from the git repo).
        wget -qO- $(params.source-url) | tar xvz

    - name: sonar-scan
      image: docker.io/sonarsource/sonar-scanner-cli:4.5@sha256:b8c95a37025f3c13162118cd55761ea0b2a13d1837f9deec51b7b6d82c52040a #tag: 4.5
      workingDir: $(workspaces.tmp-workspace.path)
      command:
        - sonar-scanner