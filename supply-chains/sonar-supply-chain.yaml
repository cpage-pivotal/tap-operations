apiVersion: carto.run/v1alpha1
kind: ClusterSupplyChain
metadata:
  name: source-test-analyze-scan-to-url
spec:
  params:
  - name: deliverable_repository
    default: ssh://git@github.com/Mpluya/polaris-run-qa-deliverable.git
  - name: deliverable_branch
    default: main
  - name: maven_repository_url
    value: https://repo.maven.apache.org/maven2
  - default: main
    name: gitops_branch
  - default: supplychain
    name: gitops_user_name
  - default: supplychain
    name: gitops_user_email
  - default: supplychain@cluster.local
    name: gitops_commit_message
  - default: "gitops-ssh"
    name: gitops_ssh_secret
  - default: ssh://git@github.com
    name: gitops_server_address
  - default: Mpluya
    name: gitops_repository_owner
  - default: config-polaris-demo
    name: gitops_repository_name
  - default: github
    name: gitops_pull_request_server_kind
  - default: ""
    name: gitops_commit_branch
  - default: ready for review
    name: gitops_pull_request_title
  - default: generated by supply chain
    name: gitops_pull_request_body
  resources:
  - name: source-provider
    params:
    - name: serviceAccount
      value: default
    - name: gitImplementation
      value: go-git
    templateRef:
      kind: ClusterSourceTemplate
      name: source-template

  - name: source-tester
    sources:
    - name: source
      resource: source-provider
    templateRef:
      kind: ClusterSourceTemplate
      name: testing-pipeline


  - name: source-scanner
    params:
    - default: scan-policy
      name: scanning_source_policy
    - default: blob-source-scan-template
      name: scanning_source_template
    sources:
    - name: source
      resource: source-tester
    templateRef:
      kind: ClusterSourceTemplate
      name: source-scanner-template
  - name: image-builder
    params:
    - name: serviceAccount
      value: default
    - name: registry
      value:
        ca_cert_data: ""
        repository: tapsme
        server: index.docker.io
    - default: default
      name: clusterBuilder
    - default: ./Dockerfile
      name: dockerfile
    - default: ./
      name: docker_build_context
    - default: []
      name: docker_build_extra_args
    sources:
    - name: source
      resource: source-scanner
    templateRef:
      kind: ClusterImageTemplate
      options:
      - name: kpack-template
        selector:
          matchFields:
          - key: spec.params[?(@.name=="dockerfile")]
            operator: DoesNotExist
      - name: kaniko-template
        selector:
          matchFields:
          - key: spec.params[?(@.name=="dockerfile")]
            operator: Exists
  - images:
    - name: image
      resource: image-builder
    name: image-scanner
    params:
    - default: snyk-scan-policy
      name: scanning_image_policy
    - default: snyk-private-image-scan-template
      name: scanning_image_template
    templateRef:
      kind: ClusterImageTemplate
      name: image-scanner-template
  - images:
    - name: image
      resource: image-scanner
    name: config-provider
    params:
    - name: serviceAccount
      value: default
    templateRef:
      kind: ClusterConfigTemplate
      name: convention-template
  - configs:
    - name: config
      resource: config-provider
    name: app-config
    templateRef:
      kind: ClusterConfigTemplate
      name: config-template
  - configs:
    - name: config
      resource: app-config
    name: config-writer
    params:
    - name: serviceAccount
      value: default
    - name: registry
      value:
        ca_cert_data: ""
        repository: tapsme
        server: index.docker.io
    templateRef:
      kind: ClusterTemplate
      name: config-writer-template

  - configs:
    name: deliverable-config
    templateRef:
      kind: ClusterConfigTemplate
      name: config-deliverable-template
  
  - name: deliverable-config-writer
    configs:
    - name: config
      resource: deliverable-config    
    params:
    - name: serviceAccount
      value: default
    templateRef:
      kind: ClusterTemplate
      name: config-writer-deliverable-template

  selector:
    apps.tanzu.vmware.com/has-tests: "true"
    apps.tanzu.vmware.com/workload-type: web
    workload-intent: code-analysis
